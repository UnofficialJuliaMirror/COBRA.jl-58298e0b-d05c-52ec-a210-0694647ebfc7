var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions-1","page":"Modules and Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#connect.jl-1","page":"Modules and Functions","title":"connect.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"connect.jl\"]","category":"page"},{"location":"functions/#checkSetup.jl-1","page":"Modules and Functions","title":"checkSetup.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"checkSetup.jl\"]","category":"page"},{"location":"functions/#distributedFBA.jl-1","page":"Modules and Functions","title":"distributedFBA.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"distributedFBA.jl\"]","category":"page"},{"location":"functions/#load.jl-1","page":"Modules and Functions","title":"load.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"load.jl\"]","category":"page"},{"location":"functions/#COBRA.loadModel","page":"Modules and Functions","title":"COBRA.loadModel","text":"loadModel(fileName, modelName::String=\"model\", printLevel)\n\nFunction used to load a COBRA model from an existing .mat file\n\nINPUTS\n\nfilename:       Name of the .mat file that contains the model structure\n\nOPTIONAL INPUTS\n\nmodelName:      String with the name of the model structure (default: \"model\")\nprintLevel:     Verbose level (default: 1). Mute all output with printLevel = 0.\n\nOUTPUTS\n\nLPproblem()     :LPproblem object with filled fields from .mat file\n\nExamples\n\nMinimum working example\n\njulia> loadModel(\"myModel.mat\")\n\nFull input/output example\n\njulia> model = loadModel(\"myModel.mat\", \"myModelName\", 2);\n\nSee also: MAT.jl, matopen(), matread()\n\n\n\n\n\n","category":"function"},{"location":"functions/#PALM.jl-1","page":"Modules and Functions","title":"PALM.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"PALM.jl\"]","category":"page"},{"location":"functions/#solve.jl-1","page":"Modules and Functions","title":"solve.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"solve.jl\"]","category":"page"},{"location":"functions/#tools.jl-1","page":"Modules and Functions","title":"tools.jl","text":"","category":"section"},{"location":"functions/#","page":"Modules and Functions","title":"Modules and Functions","text":"Modules = [COBRA]\nPages = [\"tools.jl\"]","category":"page"},{"location":"tutorials/#Tutorials-1","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/#Tutorial-COBRA.jl-1","page":"Tutorials","title":"Tutorial - COBRA.jl","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"This tutorial serves as a quick start guide as well as an interactive reference for more advanced users. Download the live notebook from here.","category":"page"},{"location":"tutorials/#Installation-1","page":"Tutorials","title":"Installation","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If you do not already have the COBRA.jl package installed, you must first first follow the installation instructions here.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Please note that should you run this tutorial on an already configured system. Otherwise, the following lines will throw an error message.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Before running any function of COBRA.jl, it is necessary to include the COBRA.jl module:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"using COBRA","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"You can test your system by running:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"COBRA.checkSysConfig()","category":"page"},{"location":"tutorials/#Beginner's-Guide-1","page":"Tutorials","title":"Beginner's Guide","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Should you not have any prior experience with Julia and/or Linux, please follow carefully the Beginner's Guide. If you however feel that you are set to proceed with this tutorial, please consider the Beginner's Guide as a go-to reference in case you are running into any issues. ","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If you see unusual behavior, you may consider reading the FAQ section.","category":"page"},{"location":"tutorials/#Quick-help-1","page":"Tutorials","title":"Quick help","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Do you feel lost or you don’t know the meaning of certain input parameters? Try typing a question mark at the Julia REPL followed by a keyword. For instance:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"julia> ? distributedFBA","category":"page"},{"location":"tutorials/#Installation-check-and-package-testing-1","page":"Tutorials","title":"Installation check and package testing","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Make sure that you have a working installation of MathProgBase.jl and at least one of the supported solvers. You may find further information here. ","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If you want to install other solvers such as CPLEX, CLP, Gurobi, or Mosek, you can find more information here.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"You may, at any time, check the integrity of the COBRA.jl package by running:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"julia> Pkg.test(\"COBRA\")","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The code has been benchmarked against the fastFVA implementation [3]. The modules and solvers are correctly installed when all tests pass without errors (warnings may appear).","category":"page"},{"location":"tutorials/#References-1","page":"Tutorials","title":"References","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"B. O. Palsson. Systems Biology: Constraint-based Reconstruction and Analysis. Cambridge University Press, NY, 2015.\nHeirendt, L & Arreckx, S. et al. Creation and analysis of biochemical constraint-based models: the COBRA Toolbox v3.0 (submitted), 2017.\nSteinn, G. et al. Computationally efficient flux variability analysis. BMC Bioinformatics, 11(1):1–3, 2010.\nOrth, J. et al. Reconstruction and use of microbial metabolic networks: the core escherichia coli metabolic model as an educational guide. EcoSal Plus, 2010.","category":"page"},{"location":"tutorials/#Tutorial-distributedFBA.jl-1","page":"Tutorials","title":"Tutorial - distributedFBA.jl","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"This tutorial serves as a reference to get started with distributedFBA.jl. Download the live notebook from here.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If you are not familiar with COBRA.jl, or how COBRA.jl should be installed, please refer to the tutorial on COBRA.jl.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"using COBRA","category":"page"},{"location":"tutorials/#Adding-local-workers-1","page":"Tutorials","title":"Adding local workers","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The connection functions are given in connect.jl, which, if a parallel version is desired, must be included separately:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"using Distributed #leejm516: This is needed even though COBRA imports that package \ninclude(joinpath(dirname(pathof(COBRA)), \"connect.jl\"))","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"You may add local workers as follows:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## specify the total number of parallel workers\nnWorkers = 4 \n\n## create a parallel pool\nworkersPool, nWorkers = createPool(nWorkers) ","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The IDs of the respective workers are given in workersPool, and the number of local workers is stored in nWorkers.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In order to be able to use the COBRA module on all connected workers, you must invoke:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"@everywhere using COBRA;","category":"page"},{"location":"tutorials/#Define-and-change-the-COBRA-solver-1","page":"Tutorials","title":"Define and change the COBRA solver","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Before the COBRA solver can be defined, the solver parameters and configuration must be loaded after having set the solverName (solver must be installed):","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":":GLPKMathProgInterface\n:CPLEX\n:Gurobi","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## specify the solver name\nsolverName = :GLPKMathProgInterface\n\n## include the solver configuration file\ninclude(joinpath(dirname(pathof(COBRA)), \"../config/solverCfg.jl\"))","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The name of the solver can be changed as follows:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## change the COBRA solver\nsolver = changeCobraSolver(solverName, solParams)","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"where solParams is an array with the definition of the solver parameters.","category":"page"},{"location":"tutorials/#Load-a-COBRA-model-1","page":"Tutorials","title":"Load a COBRA model","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"As a test and as an example, the E.coli core model may be loaded as:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## download the test model\nusing HTTP\ninclude(joinpath(dirname(pathof(COBRA)), \"../test/getTestmodel.jl\"))\ngetTestModel()","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Load the stoichiometric matrix S from a MATLAB structure named model in the specified .mat file","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"model = loadModel(\"ecoli_core_model.mat\", \"S\", \"model\");","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"where S is the name of the field of the stoichiometric matrix and model is the name of the model. Note the semicolon that suppresses the ouput of model.","category":"page"},{"location":"tutorials/#Flux-Balance-Analysis-(FBA)-1","page":"Tutorials","title":"Flux Balance Analysis (FBA)","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In order to run a flux balance analysis (FBA), distributedFBA can be invoked with only 1 reaction and without an extra condition:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## set the reaction list (only one reaction)\nrxnsList = 13\n\n## select the reaction optimization mode\n##  0: only minimization\n##  1: only maximization\n##  2: maximization and minimization\nrxnsOptMode = 1\n\n## launch the distributedFBA process with only 1 reaction on 1 worker\nminFlux, maxFlux  = distributedFBA(model, solver, nWorkers=1, rxnsList=rxnsList, rxnsOptMode=rxnsOptMode);","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"where the reaction number 13 is solved. Note that the no extra conditions are added to the model (last function argument is false). The minimum flux and maximum flux can hence be listed as:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"maxFlux[rxnsList]","category":"page"},{"location":"tutorials/#Flux-Variability-Analysis-(FVA)-1","page":"Tutorials","title":"Flux Variability Analysis (FVA)","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In order to run a common flux variability analysis (FVA), distributedFBA can be invoked with all reactions as follows:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## launch the distributedFBA process with all reactions\nminFlux, maxFlux, optSol, fbaSol, fvamin, fvamax = distributedFBA(model, solver, nWorkers=4, optPercentage=90.0, preFBA=true);","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The optimal solution of the original FBA problem can be retrieved with:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"optSol","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The corresponding solution vector maxFlux of the original FBA that is solved with:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"fbaSol","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The minimum and maximum fluxes of each reaction are in:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"maxFlux","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The flux vectors of all the reactions are stored in fvamin and fvamax.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"fvamin","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"fvamax","category":"page"},{"location":"tutorials/#DistributedFBA-of-distinct-reactions-1","page":"Tutorials","title":"DistributedFBA of distinct reactions","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"You may now input several reactions with various rxnsOptMode values to run specific optimization problems.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"rxnsList = [1; 18; 10; 20:30; 90; 93; 95]\nrxnsOptMode = [0; 1; 2; 2 .+ zeros(Int, length(20:30)); 2; 1; 0]\n\n## run only a few reactions with rxnsOptMode and rxnsList\n## distributedFBA(model, solver, nWorkers, optPercentage, objective, rxnsList, strategy, preFBA, rxnsOptMode)\nminFlux, maxFlux, optSol, fbaSol, fvamin, fvamax, statussolmin, statussolmax = distributedFBA(model, solver);","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Note that the reactions can be input as an unordered list.","category":"page"},{"location":"tutorials/#Saving-the-variables-1","page":"Tutorials","title":"Saving the variables","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"You can save the output of distributedFBA by using:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"saveDistributedFBA(\"results.mat\")","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Note that the results are saved in a .mat file that can be opened in MATLAB for further processing.","category":"page"},{"location":"tutorials/#Cleanup-1","page":"Tutorials","title":"Cleanup","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In order to cleanup the files generated during this tutorial, you can remove the files using:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"rm(\"ecoli_core_model.mat\")\nrm(\"results.mat\")","category":"page"},{"location":"tutorials/#References-2","page":"Tutorials","title":"References","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"B. O. Palsson. Systems Biology: Constraint-based Reconstruction and Analysis. Cambridge University Press, NY, 2015.\nHeirendt, L & Arreckx, S. et al. Creation and analysis of biochemical constraint-based models: the COBRA Toolbox v3.0 (submitted), 2017.\nSteinn, G. et al. Computationally efficient flux variability analysis. BMC Bioinformatics, 11(1):1–3, 2010.\nOrth, J. et al. Reconstruction and use of microbial metabolic networks: the core escherichia coli metabolic model as an educational guide. EcoSal Plus, 2010.","category":"page"},{"location":"tutorials/#Tutorial-PALM.jl-1","page":"Tutorials","title":"Tutorial - PALM.jl","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"This tutorial serves as a reference to get started with PALM.jl. Download the live notebook from here.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If you are not familiar with COBRA.jl, or how COBRA.jl should be installed, please refer to the tutorial on COBRA.jl.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Note: In order to run this tutorial, you must have MATLAB installed and a valid MATLAB license.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Please make sure to have the following packages installed: COBRA.jl, MATLAB, and MAT.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"\nimport Pkg;\n##Pkg.add(\"COBRA\")\nPkg.add(\"MATLAB\")\n","category":"page"},{"location":"tutorials/#Writing-a-MATLAB-script-1","page":"Tutorials","title":"Writing a MATLAB script","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The main functionality of PALM.jl is to run a MATLAB script that loads a different model each time from a directory of models. The MATLAB script can be based on any tutorial of the CORBA Toolbox or on a custom script.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In order to illustrate the inner workings of PALM.jl, we will write a custom script that loads a different model out of a folder of 4 models, and calculates several numerical characteristics of the stoichiometric matrix. The analysis is accelerated by distributing these 4 models across 2 different workers.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The MATLAB script can be saved as scriptFile.m in any folder. For illustration purposes, this script is located in the test/ folder of the COBRA.jl installation directory, but may be located in any other directory. Its content can be visualized as follows:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"using COBRA\nrun(`cat $(joinpath(dirname(pathof(COBRA)), \"../test/scriptFile.m\"))`)","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Note that the variables marked with PALM_ are the ones defined within Julia.","category":"page"},{"location":"tutorials/#Installation-of-the-COBRA-Toolbox-1","page":"Tutorials","title":"Installation of the COBRA Toolbox","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"As the scriptFile.m refers to the readCbModel function implemented in the COBRA Toolbox, the COBRA Toolbox must be installed by following the installation instructions here.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If you already have a working installation of the COBRA Toolbox, you may skip the following lines. The COBRA Toolbox may be installed in any directory - please write it down for later use in this tutorial.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Advanced users may also want to install the COBRA Toolbox directly installed from Julia. You must have git (or gitBash on Windows) installed - see requirements.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"For illustration purposes of this tutorial, the COBRA Toolbox will be installed in the ~/tmp directory. This may take a while, depending on the speed of your internet connection.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"installDir = homedir()*\"/tmp/cobratoolbox\"","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## if you already ran this tutorial once, you may also remove the previous installation directory with the following command:\n## Note: The following command removes the directory specified above!\nrun(`rm -rf $installDir`)","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"run(`git clone --depth=1 --recurse-submodules https://github.com/opencobra/cobratoolbox.git $installDir`);\n@info \"The COBRA Toolbox has been cloned successfully to the $installDir directory.\"","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"run(`mkdir \"~/tmp/cobratoolbox\"`)","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Tip: When using PALM.jl, it is advised to add the --recurse-submodules flag. This will speed up the simultaneous initialisations on several workers.","category":"page"},{"location":"tutorials/#Connecting-workers-1","page":"Tutorials","title":"Connecting workers","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Similarly to distributedFBA.jl, the workers may be added using createPool, given in the external function connect.jl, which must be included separately. Please note that also workers connected via SSH may be added to the pool of workers.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"using Distributed\ninclude(joinpath(dirname(pathof(COBRA)), \"connect.jl\"))","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"## specify the total number of parallel workers\nnWorkers = 4 \n\n## create a parallel pool\nworkersPool, nWorkers = createPool(nWorkers) ","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"After initializing the workers, the packages must be loaded on each worker:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"@everywhere using COBRA;\n@everywhere using MATLAB;","category":"page"},{"location":"tutorials/#Sharing-the-load-1","page":"Tutorials","title":"Sharing the load","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Within PALM.jl, the load is shared automatically. However, it might be illustrative to check upfront when planning a large-scale simulation how the load will be shared. For this purpose, the shareLoad function within the COBRA.jl package may be used.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"If there are 4 models to be distributed across 4 workers, the load sharing is ideal, as every worker will run 1 model.","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"nWorkers, quotientModels, remainderModels = COBRA.shareLoad(4)","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In case of sharing 6 models across the connected 4 workers, the load sharing will not be ideal:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"nWorkers, quotientModels, remainderModels = COBRA.shareLoad(6)","category":"page"},{"location":"tutorials/#Preparing-the-models-1","page":"Tutorials","title":"Preparing the models","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"In order to illustrate how several models can be loaded, the models included in the COBRA Toolbox may be used. The list of models may be displayed using:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"modelDir = \"$installDir/test/models/mat\"\nreaddir(modelDir)","category":"page"},{"location":"tutorials/#Output-variables-1","page":"Tutorials","title":"Output variables","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The variables that should be retrieved from the script (see scriptFile.m) can be defined in an array as follows:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"varsCharact = [\"nMets\", \"nRxns\", \"nElem\", \"nNz\"]","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Note: The variable names defined in varsCharac are the same as in the MATLAB script.","category":"page"},{"location":"tutorials/#Running-PALM-1","page":"Tutorials","title":"Running PALM","text":"","category":"section"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The input parameters of PALM.jl are defined as:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"? PALM","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"Now, all variables are defined, and PALM.jl is ready to be launched:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"PALM(modelDir, \"$(joinpath(dirname(pathof(COBRA)), \"../test/scriptFile.m\"))\"; nMatlab=nWorkers, outputFile=\"modelCharacteristics.mat\", varsCharact=varsCharact, cobraToolboxDir=installDir)","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The output file that contains the values of the variables defined in varsCharact for each model is modelCharacteristics.mat. This file can be read back into Julia by using:","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"using MAT\nvars = matread(\"modelCharacteristics.mat\")","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"The full data set can be retrieved with: ","category":"page"},{"location":"tutorials/#","page":"Tutorials","title":"Tutorials","text":"summaryData = vars[\"summaryData\"]","category":"page"},{"location":"contents/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"contents/#","page":"Index","title":"Index","text":"","category":"page"},{"location":"beginnerGuide/#Beginner's-Guide-1","page":"Beginner's Guide","title":"Beginner's Guide","text":"","category":"section"},{"location":"beginnerGuide/#What-is-Julia?-1","page":"Beginner's Guide","title":"What is Julia?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"\"Julia is a high-level, high-performance dynamic programming language […]\". You may read more about Julia here.","category":"page"},{"location":"beginnerGuide/#How-do-I-get-Julia?-1","page":"Beginner's Guide","title":"How do I get Julia?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"You may download Julia as explained here. Please read through the Julia documentation if this is your first time trying out Julia.","category":"page"},{"location":"beginnerGuide/#How-do-I-use-Julia?-1","page":"Beginner's Guide","title":"How do I use Julia?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"On Windows, click on the executable .exe to start Julia. You may launch Julia on Linux or macOS by in a terminal window:","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"julia","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"You should then see the prompt of Julia:","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"julia>","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"You are now in the so-called REPL. Here, you can type all Julia-commands. You can quit Julia by typing","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"julia> quit()","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"or hitting CTRL-d.","category":"page"},{"location":"beginnerGuide/#What-if-I-need-help?-1","page":"Beginner's Guide","title":"What if I need help?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"If you need help, you can always type a ?at the Julia REPL. For instance, if you require assistance with the abs (absolute value) function, you may type (in the Julia REPL next to julia>):","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"? abs","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"You may also find the FAQ of this documentation interesting, especially if you are running into issues.","category":"page"},{"location":"beginnerGuide/#How-do-I-install-a-solver?-1","page":"Beginner's Guide","title":"How do I install a solver?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Please make sure that you have at least one of the supported solvers installed on your system.","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"In order to get you started, you may install the Clp solver using:","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"julia> Pkg.add(\"Clp\")","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"This might take a while, as the Clp solver is downloaded to your system and then installed.","category":"page"},{"location":"beginnerGuide/#What-if-I-want-another-solver?-1","page":"Beginner's Guide","title":"What if I want another solver?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"As an example, and in order to get you started quickly, you may install the GLPK solver. On Windows, please follow these instructions. You must have cmake installed and gcc as described here and here.","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"On Linux, type:","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"sudo apt-get install cmake glpk-utils python-glpk libgmp-dev hdf5-tools","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"On macOS, you may install GLPK by using brew:","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"brew install glpk","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"In order to be able to use the GLPK solver, you must add the GLPKMathProgInterface and GLPK packages (see their respective GitHub pages here and here):","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Pkg.add(\"GLPK\")\nPkg.add(\"GLPKMathProgInterface\")","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Other supported solvers, such as CPLEX, Clp, Gurobi, or Mosek, may be installed in a similar way. Their respective interfaces are described here. If you want to use CPLEX, you must follow the installation instructions here. Most importantly, make sure that you set the LD_LIBRARY_PATH environment variable.","category":"page"},{"location":"beginnerGuide/#There-is-a-tutorial,-but-I-cannot-open-it.-What-should-I-do?-1","page":"Beginner's Guide","title":"There is a tutorial, but I cannot open it. What should I do?","text":"","category":"section"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"If you wish to install Jupyter notebook on your own system, you may download Jupyter notebook from here.","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Please make sure that you have at least Julia 0.5 as a kernel when running the Jupyter notebook. You may install the Julia kernel by launching Julia and running the following command from within the Julia REPL (as explained here):","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Pkg.add(\"IJulia\")","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"You have a working kernel if you see in the top right corner the name of the Julia kernel (Julia 0.5).","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Please note that before adding the IJulia package, you must have followed the Jupyter installation instructions. If you are running into any issue running this tutorial on either Jupyter notebook, try it out locally by downloading first Julia as explained here.","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"Now, you can start the Jupyter notebook. On Linux, you may start Jupyter with:","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"jupyter notebook","category":"page"},{"location":"beginnerGuide/#","page":"Beginner's Guide","title":"Beginner's Guide","text":"You are all set and can run the tutorial.","category":"page"},{"location":"configuration/#Configuration-1","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"configuration/#Solver-configuration-parameters:-solverCfg.jl-1","page":"Configuration","title":"Solver configuration parameters: solverCfg.jl","text":"","category":"section"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"In order to load currently defined solver parameters, the following file may be included in the script, which defines the solParams array:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"pkgDir = joinpath(dirname(pathof(COBRA)), \"..\")\ninclude(pkgDir*\"/config/solverCfg.jl\")","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"Then, the COBRA solver can be set with:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"solver = changeCobraSolver(solverName, solParams);","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"If specific solver parameters should be set, the file solverCfg.jl may also be edited, or a new file mySolverCfg.jl can be created in the folder config loaded as:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"include(\"config/mySolverCfg.jl\")","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"The solver can then be set in a similar way with the additional argument solParams in changeCobraSolver.","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"In general, an array with all solver parameters is defined as follows:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"solParams = [(:parameter, value)]","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"For the CPLEX solver, a list of all CPLEX parameters can be found here. The array of solver parameters can be defined as follows:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"solParams = [\n    # decides whether or not results are displayed on screen in an application of the C API.\n    (:CPX_PARAM_SCRIND,         0);\n\n    # sets the parallel optimization mode. Possible modes are automatic, deterministic, and opportunistic.\n    (:CPX_PARAM_PARALLELMODE,   1);\n\n    # sets the default maximal number of parallel threads that will be invoked by any CPLEX parallel optimizer.\n    (:CPX_PARAM_THREADS,        1);\n\n    # partitions the number of threads for CPLEX to use for auxiliary tasks while it solves the root node of a problem.\n    (:CPX_PARAM_AUXROOTTHREADS, 2);\n\n    # decides how to scale the problem matrix.\n    (:CPX_PARAM_SCAIND,         1);\n\n    # controls which algorithm CPLEX uses to solve continuous models (LPs).\n    (:CPX_PARAM_LPMETHOD,       0)\n] #end of solParams","category":"page"},{"location":"configuration/#SSH-connection-details:-sshCfg.jl-1","page":"Configuration","title":"SSH connection details: sshCfg.jl","text":"","category":"section"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"A parallel pool with workers on SSH nodes can be created using:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"pkgDir = joinpath(dirname(pathof(COBRA)), \"..\")\ninclude(pkgDir*\"/src/connect.jl\")\nworkersPool, nWorkers = createPool(12, true, \"mySSHCfg.jl\")","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"which will connect 12 local workers, and all workers defined in mySSHCfg.jl. An example connection file is provided in the config/ folder of the COBRA package installation folder.","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"An array with all connection details to SSH nodes is defined as follows:","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"sshWorkers = Array{Dict{Any, Any}}(1)\n\nsshWorkers[1,:] = Dict( \"usernode\"   => \"first.last@server.com\",\n                        \"procs\"  => 32,\n                        \"dir\"    => `~/COBRA.jl/`,\n                        \"flags\"  => `-4 -p22`,\n                        \"exename\"=> \"/usr/bin/julia/bin/./julia\")","category":"page"},{"location":"configuration/#","page":"Configuration","title":"Configuration","text":"Make sure that the size of sshWorkers is properly set.","category":"page"},{"location":"faq/#FAQ-1","page":"FAQ","title":"Frequently Asked Questions (FAQ)","text":"","category":"section"},{"location":"faq/#Why-can't-I-build-packages-in-Julia?-1","page":"FAQ","title":"Why can't I build packages in Julia?","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"In order to build the packages of Julia, cmake must be installed on Unix systems. In addition, csh must be installed in order to open a MATLAB session. Both packages can be installed using system commands (must have sudo rights):","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"$ sudo apt-get install cmake csh","category":"page"},{"location":"faq/#Why-do-the-Julia-instances-on-remote-workers-not-start?-1","page":"FAQ","title":"Why do the Julia instances on remote workers not start?","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"There can be several reasons, but majorly, you must ensure that the Julia configuration on all the nodes is the same than on the host node.","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Make sure that the lib folder in ~/.julia is the same on the ALL the nodes (.ji files in /.julia/lib/v0.x). The exact (bitwise) same usr/lib/julia/* binaries, which requires copying them to each machine. In order to have the same .ji files on all nodes, it is recommended to copy them from a central storage space (or cloud) to the library folder on the node:","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"$ cp ~/centralStorage/CPLEX.ji ~/.julia/lib/v0.x/\n$ cp ~/centralStorage/MathProgBase.ji ~/.julia/lib/v0.x/","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Once all the .ji have been copied, do not use or build the modules on the nodes. In other words, do not type using CPLEX/MathProgBase at the REPL. Alternatively, you may set JULIA_PKGDIR to a cloud or common storage location.","category":"page"},{"location":"faq/#Some-workers-are-dying-how-can-I-avoid-this?-1","page":"FAQ","title":"Some workers are dying - how can I avoid this?","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Set the enviornment variables explicity on the host in the .bashrc file or /etc/profile.d","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"export JULIA_WORKER_TIMEOUT=1000;","category":"page"},{"location":"faq/#I-cannot-access-the-SSH-nodes.-What-am-I-doing-wrong?-1","page":"FAQ","title":"I cannot access the SSH nodes. What am I doing wrong?","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"You must have configured your ssh keys in order to be able to access the nodes, or you must access the nodes without credentials.","category":"page"},{"location":"faq/#My-machine-is-a-Windows-machine,-and-everything-is-so-slow.-What-can-I-do?-1","page":"FAQ","title":"My machine is a Windows machine, and everything is so slow. What can I do?","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Some Windows users may have to wait a while when installing Julia. The performance of COBRA.jl is unaffected by this relatively long load time. However, you may try these avenues of fixing this:","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Try setting the git parameters correctly (using git bash that you can download from here):","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"$ git config --global core.preloadindex true\n$ git config --global core.fscache true\n$ git config --global gc.auto 256","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Make sure that you set the following environment variables correctly:","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"$ set JULIA_PKGDIR=C:\\Users\\<yourUsername>\\.julia\\vx.y.z\n$ set HOME=C:\\Users\\<yourUsername>\\AppData\\Local\\Julia-x.y.z","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"Make sure that the .julia folder is not located on a network. This slows the processes in Julia down dramatically.","category":"page"},{"location":"faq/#How-can-I-generate-the-documentation?-1","page":"FAQ","title":"How can I generate the documentation?","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"You can generate the documentation using Documenter.jl by typing in /docs:","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"$ julia --color=yes makeDoc.jl","category":"page"},{"location":"faq/#How-can-I-get-the-latest-version-of-COBRA.jl-1","page":"FAQ","title":"How can I get the latest version of COBRA.jl","text":"","category":"section"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"If you want to enjoy the latest untagged (but eventually unstable) features of COBRA.jl, do the following from within Julia:","category":"page"},{"location":"faq/#","page":"FAQ","title":"FAQ","text":"julia> Pkg.checkout(\"COBRA\", \"develop\")","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"(Image: COBRA logo)","category":"page"},{"location":"#COBRA.jl-COnstraint-Based-Reconstruction-and-Analysis-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"Documentation Coverage Continuous integration - ARTENOLIS\n(Image: ) (Image: coverage status) (Image: linux) (Image: macOS) (Image: windows10)","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"COBRA.jl is a package written in Julia used to perform COBRA analyses such as Flux Balance Anlysis (FBA), Flux Variability Anlysis (FVA), or any of its associated variants such as distributedFBA [1].","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"FBA and FVA rely on the solution of LP problems. The package can be used with ease when the LP problem is defined in a .mat file according to the format outlined in the COBRA Toolbox [2].","category":"page"},{"location":"#Installation-of-COBRA.jl-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"Installation of COBRA.jl","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"If you are new to Julia, you may find the Beginner's Guide interesting. A working installation of Julia is required.","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"At the Julia prompt, add the COBRA package:","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"julia> Pkg.add(\"COBRA\")","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"Use the COBRA.jl module by running:","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"julia> using COBRA","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"COBRA.jl has been tested on Julia v0.5+ on Ubuntu Linux 14.04+, MacOS 10.7+, and Windows 7 (64-bit). All solvers supported by MathProgBase.jl are supported by COBRA.jl, but must be installed separately. A COBRA model saved as a .mat file can be read in using MAT.jl. MathProgBase.jl and MAT.jl are automatically installed during the installation of the COBRA.jl package.","category":"page"},{"location":"#Tutorial,-documentation-and-FAQ-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"Tutorial, documentation and FAQ","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"The comprehensive tutorials are based on interactive Jupyter notebooks.","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"The COBRA.jl package is fully documented here. You may also display the documentation in the Julia REPL:","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"julia> ? distributedFBA","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":":bulb: Should you encounter any errors or unusual behavior, please refer first to the FAQ section or open an issue.","category":"page"},{"location":"#Testing-and-benchmarking-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"Testing and benchmarking","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"You can test the package using:","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"julia> Pkg.test(\"COBRA\")","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"Shall no solvers be detected on your system, error messages may be thrown when testing the COBRA.jl package.","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"The code has been benchmarked against the fastFVA implementation [3]. A test model ecoli_core_model.mat [4] can be used to pre-compile the code and can be downloaded using","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"julia> using HTTP, COBRA\njulia> pkgDir = joinpath(dirname(pathof(COBRA)), \"..\")\njulia> include(pkgDir*\"/test/getTestModel.jl\")\njulia> getTestModel()","category":"page"},{"location":"#How-to-cite-distributedFBA.jl?-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"How to cite distributedFBA.jl?","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"The corresponding paper can be downloaded from here. You may cite distributedFBA.jl as follows:","category":"page"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"Laurent Heirendt, Ines Thiele, Ronan M. T. Fleming; DistributedFBA.jl: high-level, high-performance flux balance analysis in Julia. Bioinformatics 2017 btw838. doi: 10.1093/bioinformatics/btw838","category":"page"},{"location":"#Limitations-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"Limitations","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"At present, a COBRA model in .mat format is loaded using the MAT.jl package. A valid MATLAB license is not required.\nThe inner layer parallelization is currently done within the solver. No log files of each spawned thread are generated.\nThe current benchmarks have been performed using default optimization and compilation options of Julia and a set of solver parameters. The performance may be further improved by tuning these parameters.","category":"page"},{"location":"#References-1","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"References","text":"","category":"section"},{"location":"#","page":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","title":"COBRA.jl - COnstraint-Based Reconstruction and Analysis","text":"B. O. Palsson., Systems Biology: Constraint-based Reconstruction and Analysis. Cambridge University Press, NY, 2015.\nHeirendt, L. and Arreckx, S. et al., Creation and analysis of biochemical constraint-based models: the COBRA Toolbox v3.0 (submitted), 2017, arXiv:1710.04038.\nSteinn, G. et al., Computationally efficient flux variability analysis. BMC Bioinformatics, 11(1):1–3, 2010.\nOrth, J. et al., Reconstruction and use of microbial metabolic networks: the core escherichia coli metabolic model as an educational guide. EcoSal Plus, 2010.","category":"page"}]
}
